<?xml version="1.0" encoding="UTF-8"?>
<!-- spring bean容器 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd    
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd    
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
    <!-- 配置需要扫描的包 -->
    <!-- 3、扫描控制器的包 -->
    <!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.blog.controller"/>

    <!--支持spring3.0+ 新的mvc注解,不加有些注解功能不行，如json转换的@ResponseBody <context:annotation-config/>
        将隐式地向 Spring 容器注册 1. AutowiredAnnotationBeanPostProcessor 2. CommonAnnotationBeanPostProcessor
        3. PersistenceAnnotationBeanPostProcessor 4. RequiredAnnotationBeanPostProcessor
        这 4 个 BeanPostProcessor。 -->
    <!-- 目的是为了在访问静态资源的同时，也能正常的访问其他非静态资源 -->
    <mvc:annotation-driven>
    </mvc:annotation-driven>

    <!-- 只加就会造成只能访问静态资源，而无法访问非静态资源。 -->
    <!-- 将所静态资源的请求交给web服务器默认的Servlet来处理，而不是让springmvc的核心控制器：DispatcherServlet
        对于不同的web服务器的默认Servlet名称是不同，tomcat的默认Servlet名称为"default" -->
    <mvc:default-servlet-handler/>

     <!--<mvc:interceptors>-->
    <!-- 全局拦截器 -->
    <!-- <bean class="com.blog.controller.MyHandlerInterceptor"/> -->
<!--         <mvc:interceptor>
            <mvc:mapping path="/**"/>
             <mvc:exclude-mapping path="/user/**"/>
             <mvc:exclude-mapping path="/ajaxSearch"/>
             <mvc:exclude-mapping path="/search"/>
             <mvc:exclude-mapping path="/showHome"/>
             <mvc:exclude-mapping path="/showFile"/>
             <mvc:exclude-mapping path="/playback"/>
             <bean class="com.blog.controller.SecureInterceptor"></bean>
    </mvc:interceptor>
</mvc:interceptors>-->
    <!-- <mvc:resources location="/WEB-INF/views/commons/error/" mapping="/error/**"></mvc:resources> -->
    <!-- 配置试图解析器：把请求处理类的返回值，加工成最终的视图路径 -->
    <!--对模型视图名称的解析，即在模型视图名称添加前后缀 p:prefix="/views/" p:suffix=".jsp" 视图解析器，其作用会Controller方法返回的字符串解析为对应的视图名:prefix
        + string + suffix 例如Controller方法返回的字符串为"success": /views/success.jsp -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".jsp"/>
        <!-- 如果使用jstl的话，配置下面的属性 -->
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"/>
    </bean>


    <!-- 当请求的内容类型为：multipart/form-data 表示文件上传的请求头 -->
    <!--<bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxInMemorySize" value="10240"/>
        <property name="uploadTempDir" value="/import/"/>&lt;!&ndash; 上传后的目录名字 &ndash;&gt;
        <property name="maxUploadSize" value="-1"/>
    </bean>-->

    <!--<bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="uploadTempDir" value="/blog/"/>&lt;!&ndash;上传后的目录名字 &ndash;&gt;
        <property name="maxUploadSize" value="-1"/>&lt;!&ndash;默认是-1，表示无限制。&ndash;&gt;
        <property name="maxInMemorySize" value="10240"/>
    </bean>-->
    <bean id="multipartResolver"
          class="com.blog.controller.CustomMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="uploadTempDir" value="/blog/"/><!--上传后的目录名字 -->
        <property name="maxUploadSize" value="-1"/><!--默认是-1，表示无限制。-->
        <property name="maxInMemorySize" value="10240"/>
    </bean>
</beans>	