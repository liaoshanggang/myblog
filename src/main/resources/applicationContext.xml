<?xml version="1.0" encoding="UTF-8"?>
<!-- spring bean容器 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd   
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd   
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	<!-- 团队开发- a-dao.xml-service.xml-*.xml -->
	<!-- 1、 -->
	<!-- 启用注解 此配置文件包含如下配置信息： 1. 扫描组件：Service, Mapper接口映射器会由spring+mybatis的整合库扫描并创建Bean实例。 -->
	<context:annotation-config />

	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com.blog.service" />
	<!-- 2、 -->
	<!-- 可以本配置文件中引用属性文件中的值 <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations" value="classpath:jdbc.properties"/> </bean> -->
	<context:property-placeholder location="classpath:database.properties" />

	<!-- 声明一个数据源 阿里巴巴的数据源实现 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- <property name="driverClassName" value="${jdbc.driver}"></property> -->
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j" />
	</bean>

	<!-- 3、声明mybatis SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- myBatis配置文件，因为mybatis有些配置无法在此完成 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 可以在Configuration.xml或此处配置映射文件，但其中不能有相同id的parameterMap, resultMap或sql等 
			<property name="mapperLocations" value="classpath*:mapper/*.xml" /> -->
		<property name="typeAliasesPackage" value="com.blog.vo" />
	</bean>

	<!-- 4、Scan Mapper Files扫描接口映射器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 接口映射器的基础包 -->
		<property name="basePackage" value="com.blog.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!--================事务相关控制=================== -->
	<!-- 声明事务管理器 什么时候提交。。 -->
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 只是声明什么方法嵌入什么事务，对这些方法管理和控制 ，这些方法的那些类被代理过的 但不知道是哪些类的方法 transactionManager.begin(); 
		proxy.insert(..) transactionManager.commit(); 内部是这样控制都 出问题就rollback了 -->
	<!-- 声明事务的切入点，即在什么样的方法上切事务所 propagation="REQUIRED"事务的传播行为 read-only="false"是否为只读事务，在只读事务的上下中只能查询不能执行CUD操作 
		rollback-for="java.lang.Exception"当事务遇到什么类型的异常时事务将回滚 -->
	<!-- 做什么 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 在哪做 -->
	<!-- 这个包和子包当中的所有的类和方法 -->
	<!-- AOP事务 -->
	<aop:config>
		<!--把事务控制在Service层，这个业务方法有可能要多个数据库操作完成，所有操作要在一个事务完成 -->
		<aop:pointcut id="txPointcut"
			expression="execution(public * com.blog.service..*.*(..))" />
		<!-- 连接起来 -->
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
	</aop:config>
</beans>
